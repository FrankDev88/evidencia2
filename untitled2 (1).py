# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kylWkfaP6gncxkaonMzseR8VqDoMG71j
"""

import datetime as dt
import openpyxl
import pandas as pd
from openpyxl.utils.dataframe import dataframe_to_rows
import re
import os
NOTAS_CSV_FILE = "notas.csv"
NOTAS_ELIMINADAS_CSV_FILE = "notas_eliminadas.csv"

EMAIL_REGEX = r'^[\w\.-]+@[\w\.-]+\.\w+$'
RFC_REGEX = r'^[A-Z&Ñ]{3,4}\d{6}[A-Z\d]{3}$'

NOTAS = {}

notas_eliminadas = set()

class FechaError(Exception):
    def __init__(self, mensaje):
        self.mensaje = mensaje
        super().__init__(self.mensaje)

class CampoVacioERR(Exception):
    def __init__(self, mensaje):
        self.mensaje = mensaje
        super().__init__(self.mensaje)

if os.path.isfile(NOTAS_CSV_FILE):
    df_notas = pd.read_csv(NOTAS_CSV_FILE)
    NOTAS = df_notas.to_dict(orient="index")
else:
    NOTAS = {}

if os.path.isfile(NOTAS_ELIMINADAS_CSV_FILE):
    df_notas_eliminadas = pd.read_csv(NOTAS_ELIMINADAS_CSV_FILE)
    notas_eliminadas = set(df_notas_eliminadas["FOLIO"])
else:
    notas_eliminadas = set()

def export_to_excel(rfc_notes, file_name):
    workbook = openpyxl.Workbook()
    worksheet = workbook.active

    headers = ["FOLIO", "FECHA", "CLIENTE", "MONTO", "RFC", "CORREO", "DETALLES"]
    worksheet.append(headers)


    for folio, nota in rfc_notes.items():

        detalles = "\n".join([f"{detalle[0]}: {detalle[1]}" for detalle in nota["DETALLES"].values()])

        row = [folio, nota["FECHA"], nota["CLIENTE"], nota["MONTO"], nota["RFC"], nota["CORREO"], detalles]
        worksheet.append(row)

    workbook.save(file_name)


def CampoVacio(cadena):
    if cadena.strip() == "":
        raise CampoVacioERR("Error: La cadena está vacía")

def validarFecha(fecha):
    if fecha > dt.datetime.now().date():
        raise CampoVacioERR("Error: La FECHA SOBREPASA A LA FECHA ACTUAL DEL SISTEMA")

def MostrarNota(NOTAS, FOLIO):
    FECHA = NOTAS["FECHA"]
    CLIENTE = NOTAS["CLIENTE"]
    MONTO = NOTAS["MONTO"]
    RFC = NOTAS["RFC"]
    CORREO = NOTAS["CORREO"]
    print(f"--------------------  REPORTE TABULAR  DE NOTA {FOLIO} ----------------------- ")
    print("                   FOLIO     FECHA       CLIENTE      MONTO   RFC CORREO            ")
    print(f"                     {FOLIO}     {FECHA}       {CLIENTE}           {MONTO}    {RFC}  {CORREO}       ")
    print(f"------------------------------------------------------------------------\n")

def MostrarDetalles(NOTAS, FOLIO):
    print(f"--------------------  DETALLES DE LA NOTA {FOLIO} ----------------------- ")
    for pedido, monto in NOTAS["DETALLES"].values():
        print(f"               {pedido}                          {monto}                    ")


def validarEmail(email):
    if not re.match(EMAIL_REGEX, email):
        raise CampoVacioERR("Error: El formato del correo electrónico no es válido")

def validarRFC(rfc):
    if not re.match(RFC_REGEX, rfc):
        raise CampoVacioERR("Error: El formato del RFC no es válido")



try:
    while True:
        OpcionMenu = int(input("QUÉ OPCIÓN ESCOGE\n1/REGISTRAR NOTA\n2/CONSULTAS DE NOTAS\n3/CANCELAR NOTA\n4/RECUPERAR NOTA\n5/SALIR DEL SISTEMA\n"))
        # CREAR NOTA
        if OpcionMenu == 1:
            try:
                MONTO_TOTAL = 0
                Folio = max(NOTAS.keys(), default=1) + 1

                while True:

                  try:
                    FECHA = input("DIGITE LA FECHA DEL PEDIDO YYYY/mm/dd: ")
                    CampoVacio(FECHA)
                    FECHA = dt.datetime.strptime(FECHA, "%Y/%m/%d").date()
                    validarFecha(FECHA)
                    break
                  except Exception as e:
                    print("ocurrio un error intente de nuevo")

                while True:
                  try:
                    NOMBRE = input("CUÁL ES SU NOMBRE: ")
                    CampoVacio(NOMBRE)
                    break
                  except Exception as e:
                    print("ocurrio un error intente de nuevo")


                while True:
                    try:
                        EMAIL = input("DIGITE SU CORREO ELECTRÓNICO: ")
                        CampoVacio(EMAIL)
                        validarEmail(EMAIL)
                        break
                    except Exception as e:
                        print(e)

                while True:
                    try:
                        RFC = input("DIGITE SU RFC: ")
                        CampoVacio(RFC)
                        validarRFC(RFC)
                        break
                    except Exception as e:
                        print(e)

                DETALLES = {}
                while True:
                    try:
                      LLAVE = max(DETALLES.keys(), default=0) + 1
                      while True:
                        try:
                          SERVICIO = input("NOMBRE DEL SERVICIO: ")
                          CampoVacio(SERVICIO)
                          break
                        except Exception as e:
                          print("ocurrio un error intente de nuevo")

                      while True:
                        try:
                          MONTO = input("DIGITE EL MONTO DE DINERO: ")
                          CampoVacio(MONTO)
                          MONTO_FLOAT = float(MONTO)
                          MONTO_TOTAL += MONTO_FLOAT
                          break
                        except Exception as e:
                          print("ocurrio un error intente de nuevo")

                      DETALLES.setdefault(LLAVE, (SERVICIO, MONTO))
                      OpcionSalida = int(input("ESOS ERAN TODOS LOS DETALLES 1/SI 2/NO: "))
                      if OpcionSalida == 1:
                          break
                    except ValueError:
                      print("ERROR USETD NO DIGITO UN VALOR ADCUADO")
                    except Exception:
                      print("ERROR INTENTE DE NUEVO")

                NOTAS.setdefault(Folio, {})
                NOTAS.get(Folio, 0).setdefault("FECHA", FECHA)
                NOTAS.get(Folio, 0).setdefault("CLIENTE", NOMBRE)
                NOTAS.get(Folio, 0).setdefault("MONTO", MONTO_TOTAL)
                NOTAS.get(Folio, 0).setdefault("DETALLES", DETALLES)
                NOTAS.get(Folio, 0).setdefault("RFC", RFC)
                NOTAS.get(Folio, 0).setdefault("CORREO", EMAIL)

            except ValueError as vr:
                print("EL VALOR QUE USTED INGRESÓ NO ES COMPATIBLE CON LO QUE SE LE PIDIÓ. INTENTE DE NUEVO")
                pass
            except FechaError as fr:
                print(fr)
                pass
            except CampoVacioERR as cr:
                print(cr)
                pass
            except Exception as e:
                print(e)
                pass

        if OpcionMenu == 2:
            try:
                while True:
                    MenuNotas = int(input("QUÉ QUIERE HACER 1\CONSULTA POR FECHA 2\CONSULTA POR FOLIO 3\SALIR: "))
                    # VER REPORTES POR INTERVALO DE FECHAS
                    if MenuNotas == 1:
                        try:
                            FechaMin = input("DIGITE LA FECHA DE INICIO (YYYY/mm/dd): ")
                            FechaMin = dt.datetime.strptime(FechaMin, "%Y/%m/%d").date()
                            FechaMax = input("DIGITE LA FECHA DE FIN (YYYY/MM/DD): ")
                            FechaMax = dt.datetime.strptime(FechaMax, "%Y/%m/%d").date()
                            Reportes = [folio for folio in NOTAS.keys() if FechaMin <= NOTAS[folio].get("FECHA") <= FechaMax and not(folio in notas_eliminadas)]
                            if Reportes:
                                for i in Reportes:
                                    MostrarNota(NOTAS[i], i)
                            else:
                                print("NO EXISTE NINGÚN REPORTE EN ESE INTERVALO DE FECHAS")
                            break
                        except ValueError as V:
                            print("EL VALOR QUE USTED INGRESÓ NO ES COMPATIBLE CON LO QUE SE LE PIDIÓ. INTENTE DE NUEVO")
                        except Exception as e:
                            print(e)

                    # VER REPORTES POR ID
                    if MenuNotas == 2:
                        try:
                            folio = int(input("QUÉ NOTA DESEA VER: "))
                            if folio in NOTAS and not(folio in notas_eliminadas):
                                MostrarNota(NOTAS.get(folio), folio)
                                MostrarDetalles(NOTAS.get(folio), folio)
                            else:
                                print("LA NOTA NO EXISTE O NO SE ENCUENTRA DISPONIBLE EN ESTE MOMENTO")
                            break
                        except ValueError as v:
                            print("EL VALOR QUE USTED INGRESÓ NO ES COMPATIBLE CON LO QUE SE LE PIDIÓ. INTENTE DE NUEVO")
                        except Exception:
                            print("OCURRIÓ UN ERROR. INTENTE DE NUEVO")

                    # SALIR DE MENU DE CONSULTAS
                    if MenuNotas == 3:
                        print("SALIENDO DEL MENU DE CONSULTAS EXITOSAMENTE")
                        break

                    if MenuNotas == 4:
                      try:
                        rfc_to_query = input("DIGITE EL RFC DEL CLIENTE A CONSULTAR: ").upper()
                        rfc_notes = {folio: nota for folio, nota in NOTAS.items() if nota["RFC"] == rfc_to_query}
                        if rfc_notes:
                            print("NOTAS DEL CLIENTE (RFC:", rfc_to_query, ")")
                            for folio, nota in rfc_notes.items():
                                  MostrarNota(nota, folio)
                                  MostrarDetalles(nota, folio)

                            total_amount = sum(nota["MONTO"] for nota in rfc_notes.values())
                            average_amount = total_amount / len(rfc_notes)
                            print(f"Monto promedio de las notas para el cliente {rfc_to_query}: {average_amount:.2f}")
                            export_choice = input("¿Desea exportar esta información a un archivo de Excel? (1/SI 2/NO): ")
                            if export_choice == "1":
                              file_name = f"{rfc_to_query}_{dt.datetime.now().strftime('%Y%m%d')}.xlsx"
                              export_to_excel(rfc_notes, file_name)
                              print(f"La información se ha exportado a '{file_name}' en el directorio actual.")
                        else:
                            print("No hay notas para el cliente con RFC:", rfc_to_query)

                      except Exception as e:
                        print("Ocurrió un error, intente de nuevo")

            except ValueError:
                print("EL VALOR QUE USTED INGRESÓ NO ES COMPATIBLE CON LO QUE SE LE PIDIÓ. INTENTE DE NUEVO")

        # CANCELAR NOTA
        if OpcionMenu == 3:
            try:
                folio = int(input("DIGITE EL FOLIO A CANCELAR: "))
                if folio in NOTAS and not(folio in notas_eliminadas):
                    MostrarNota(NOTAS.get(folio), folio)
                    MostrarDetalles(NOTAS.get(folio), folio)
                    decision = int(input("SEGURO QUIERE CANCELARLA 1/SI 2/NO: "))
                    if decision == 1:
                        notas_eliminadas.add(folio)
                        print("LA NOTA FUE CANCELADA. VOLVIENDO AL MENÚ")
                    elif decision == 2:
                        print("LA NOTA NO FUE CANCELADA. VOLVIENDO AL MENÚ")
                else:
                    print("EL FOLIO QUE USTED PROPORCIONÓ NO SE ENCUENTRA DISPONIBLE EN ESTE MOMENTO O ES INEXISTENTE")

            except TypeError as NT:
                print(f"EL FOLIO NO EXISTE {NT}")
            except ValueError as V:
                print("EL VALOR QUE USTED INGRESÓ NO ES COMPATIBLE CON LO QUE SE LE PIDIÓ. INTENTE DE NUEVO")
            except Exception as e:
                print(e)

        # RECUPERACIÓN DE NOTAS
        if OpcionMenu == 4:
            try:
                for folio in notas_eliminadas:
                    MostrarNota(NOTAS.get(folio), folio)
                decision = int(input("DESEA RECUPERAR ALGUNA NOTA 1/SI 2/NO: "))
                if decision == 1:
                    folio = int(input("QUÉ NOTA DESEA RECUPERAR: "))
                    if folio in notas_eliminadas:
                        MostrarDetalles(NOTAS.get(folio), folio)
                        decision = input("SEGURO 1/SI  2/NO: ")
                        if int(decision) == 1:
                            notas_eliminadas.remove(folio)
                            print("LA NOTA SE RECUPERÓ EXITOSAMENTE")
                        elif int(decision) == 2:
                            print("LA NOTA NO FUE RECUPERADA. SALIENDO AL MENÚ PRINCIPAL.")
                            break
                    else:
                        print("LA NOTA QUE USTED DIGITÓ NO ESTÁ ELIMINADA O NO EXISTE EN EL SISTEMA. SALIENDO AL MENÚ PRINCIPAL.")
                else:
                    print("VOLVIENDO AL MENÚ PRINCIPAL")
            except ValueError as v:
                print("EL VALOR QUE USTED INGRESÓ NO ES COMPATIBLE CON LO QUE SE LE PIDIÓ. INTENTE DE NUEVO")
            except Exception:
                print("OCURRIÓ UN ERROR. INTENTE DE NUEVO")

        # SALIDA DEL SISTEMA
        if OpcionMenu == 5:
            print("SALIENDO DEL SISTEMA")
            break
except ValueError:
    print("EL VALOR QUE USTED INGRESÓ NO ES COMPATIBLE CON LO QUE SE LE PIDIÓ. INTENTE DE NUEVO")


df_notas = pd.DataFrame.from_dict(NOTAS, orient="index")
df_notas.to_csv(NOTAS_CSV_FILE, index=False)

df_notas_eliminadas = pd.DataFrame({"FOLIO": list(notas_eliminadas)})
df_notas_eliminadas.to_csv(NOTAS_ELIMINADAS_CSV_FILE, index=False)

